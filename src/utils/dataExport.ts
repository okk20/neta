import { db, type Student, type Teacher, type Subject, type Score } from './database';

// Data structures for export
export interface ExportData {
  students: Student[];
  teachers: Teacher[];
  subjects: Subject[];
  scores: Score[];
  exportDate: string;
  exportedBy: string;
  schoolInfo: {
    name: string;
    address: string;
    phone: string;
    email: string;
  };
}

// Export format types
export type ExportFormat = 'json' | 'csv' | 'excel' | 'docx' | 'pptx';

// Excel export utility
export const exportToExcel = async (data: ExportData): Promise<Blob> => {
  // This would use a library like xlsx or exceljs in a real implementation
  const workbookData = {
    SheetNames: ['Students', 'Teachers', 'Subjects', 'Scores', 'Summary'],
    Sheets: {
      'Students': createStudentsSheet(data.students),
      'Teachers': createTeachersSheet(data.teachers),
      'Subjects': createSubjectsSheet(data.subjects),
      'Scores': createScoresSheet(data.scores),
      'Summary': createSummarySheet(data)
    }
  };

  // Simulate Excel file creation
  const csvContent = convertToCSV(data);
  return new Blob([csvContent], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
};

// Word document export utility
export const exportToDocx = async (data: ExportData): Promise<Blob> => {
  // This would use a library like docx in a real implementation
  const documentContent = `
SCHOOL EXAMINATION MANAGEMENT SYSTEM (SEMS)
Data Export Report

School: ${data.schoolInfo.name}
Address: ${data.schoolInfo.address}
Export Date: ${new Date(data.exportDate).toLocaleDateString()}
Exported By: ${data.exportedBy}

SUMMARY:
- Total Students: ${data.students.length}
- Total Teachers: ${data.teachers.length}
- Total Subjects: ${data.subjects.length}
- Total Score Records: ${data.scores.length}

STUDENTS LIST:
${data.students.map(s => `
ID: ${s.id}
Name: ${s.name}
Class: ${s.class}
Guardian: ${s.guardianName}
Phone: ${s.guardianPhone || 'N/A'}
Status: ${s.status}
`).join('\n')}

TEACHERS LIST:
${data.teachers.map(t => `
ID: ${t.id}
Name: ${t.name}
Title: ${t.title || 'N/A'}
Email: ${t.email || 'N/A'}
Phone: ${t.phone || 'N/A'}
Subjects: ${t.subjects?.join(', ') || 'N/A'}
Status: ${t.status}
`).join('\n')}

SUBJECTS LIST:
${data.subjects.map(s => `
ID: ${s.id}
Name: ${s.name}
Code: ${s.code}
Description: ${s.description || 'N/A'}
Teacher: ${s.teacherId}
Status: ${s.status}
`).join('\n')}

SCORES SUMMARY:
${data.scores.map(s => `
Student: ${s.studentId}
Subject: ${s.subjectId}
Class Score: ${s.classScore}/50
Exam Score: ${s.examScore}/50
Total: ${s.classScore + s.examScore}/100
Term: ${s.term}
Year: ${s.academicYear}
`).join('\n')}

End of Report
Generated by SEMS - "Knowledge is Power"
`;

  return new Blob([documentContent], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });
};

// PowerPoint export utility
export const exportToPptx = async (data: ExportData): Promise<Blob> => {
  // This would use a library like pptxgenjs in a real implementation
  const presentationContent = `
SEMS Data Export Presentation

Slide 1: Title
School Examination Management System (SEMS)
Data Export Summary
${new Date(data.exportDate).toLocaleDateString()}

Slide 2: Overview
School: ${data.schoolInfo.name}
Students: ${data.students.length}
Teachers: ${data.teachers.length}
Subjects: ${data.subjects.length}
Score Records: ${data.scores.length}

Slide 3: Student Statistics
Total Students: ${data.students.length}
Active Students: ${data.students.filter(s => s.status === 'active').length}
Classes: ${[...new Set(data.students.map(s => s.class))].length}

Slide 4: Teacher Statistics
Total Teachers: ${data.teachers.length}
Active Teachers: ${data.teachers.filter(t => t.status === 'active').length}
Subject Coverage: ${data.subjects.length} subjects taught

Slide 5: Academic Performance
Total Assessments: ${data.scores.length}
Average Class Score: ${data.scores.length > 0 ? Math.round(data.scores.reduce((sum, s) => sum + s.classScore, 0) / data.scores.length) : 0}
Average Exam Score: ${data.scores.length > 0 ? Math.round(data.scores.reduce((sum, s) => sum + s.examScore, 0) / data.scores.length) : 0}

Generated by SEMS
`;

  return new Blob([presentationContent], { type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation' });
};

// CSV export utility
export const exportToCSV = (data: ExportData): Blob => {
  const csvContent = convertToCSV(data);
  return new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
};

// JSON export utility
export const exportToJSON = (data: ExportData): Blob => {
  const jsonContent = JSON.stringify(data, null, 2);
  return new Blob([jsonContent], { type: 'application/json' });
};

// Helper functions
const createStudentsSheet = (students: Student[]) => {
  const headers = ['ID', 'Name', 'Class', 'Date of Birth', 'Gender', 'Guardian Name', 'Guardian Phone', 'Address', 'Status'];
  const rows = students.map(s => [
    s.id, s.name, s.class, s.dateOfBirth, s.gender, 
    s.guardianName, s.guardianPhone || '', s.address || '', s.status
  ]);
  return { headers, rows };
};

const createTeachersSheet = (teachers: Teacher[]) => {
  const headers = ['ID', 'Name', 'Title', 'Email', 'Phone', 'Subjects', 'Class Teacher', 'Status'];
  const rows = teachers.map(t => [
    t.id, t.name, t.title || '', t.email || '', t.phone || '',
    t.subjects?.join('; ') || '', t.isClassTeacher ? 'Yes' : 'No', t.status
  ]);
  return { headers, rows };
};

const createSubjectsSheet = (subjects: Subject[]) => {
  const headers = ['ID', 'Name', 'Code', 'Description', 'Teacher ID', 'Status'];
  const rows = subjects.map(s => [
    s.id, s.name, s.code, s.description || '', s.teacherId, s.status
  ]);
  return { headers, rows };
};

const createScoresSheet = (scores: Score[]) => {
  const headers = ['ID', 'Student ID', 'Subject ID', 'Class Score', 'Exam Score', 'Total', 'Term', 'Academic Year'];
  const rows = scores.map(s => [
    s.id, s.studentId, s.subjectId, s.classScore.toString(), s.examScore.toString(),
    (s.classScore + s.examScore).toString(), s.term, s.academicYear
  ]);
  return { headers, rows };
};

const createSummarySheet = (data: ExportData) => {
  const headers = ['Metric', 'Value'];
  const rows = [
    ['Export Date', new Date(data.exportDate).toLocaleDateString()],
    ['Exported By', data.exportedBy],
    ['School Name', data.schoolInfo.name],
    ['Total Students', data.students.length.toString()],
    ['Active Students', data.students.filter(s => s.status === 'active').length.toString()],
    ['Total Teachers', data.teachers.length.toString()],
    ['Active Teachers', data.teachers.filter(t => t.status === 'active').length.toString()],
    ['Total Subjects', data.subjects.length.toString()],
    ['Total Score Records', data.scores.length.toString()],
    ['Classes', [...new Set(data.students.map(s => s.class))].length.toString()]
  ];
  return { headers, rows };
};

const convertToCSV = (data: ExportData): string => {
  let csv = '';
  
  // Students section
  csv += 'STUDENTS\n';
  csv += 'ID,Name,Class,Date of Birth,Gender,Guardian Name,Guardian Phone,Address,Status\n';
  data.students.forEach(s => {
    csv += `"${s.id}","${s.name}","${s.class}","${s.dateOfBirth}","${s.gender}","${s.guardianName}","${s.guardianPhone || ''}","${s.address || ''}","${s.status}"\n`;
  });
  
  csv += '\nTEACHERS\n';
  csv += 'ID,Name,Title,Email,Phone,Subjects,Class Teacher,Status\n';
  data.teachers.forEach(t => {
    csv += `"${t.id}","${t.name}","${t.title || ''}","${t.email || ''}","${t.phone || ''}","${t.subjects?.join('; ') || ''}","${t.isClassTeacher ? 'Yes' : 'No'}","${t.status}"\n`;
  });
  
  csv += '\nSUBJECTS\n';
  csv += 'ID,Name,Code,Description,Teacher ID,Status\n';
  data.subjects.forEach(s => {
    csv += `"${s.id}","${s.name}","${s.code}","${s.description || ''}","${s.teacherId}","${s.status}"\n`;
  });
  
  csv += '\nSCORES\n';
  csv += 'ID,Student ID,Subject ID,Class Score,Exam Score,Total,Term,Academic Year\n';
  data.scores.forEach(s => {
    csv += `"${s.id}","${s.studentId}","${s.subjectId}","${s.classScore}","${s.examScore}","${s.classScore + s.examScore}","${s.term}","${s.academicYear}"\n`;
  });
  
  return csv;
};

// Main export function
export const exportSchoolData = async (
  format: ExportFormat, 
  exportedBy: string = 'admin'
): Promise<{ blob: Blob; filename: string }> => {
  try {
    // Gather all data
    const [students, teachers, subjects, scores] = await Promise.all([
      db.getAllStudents(),
      db.getAllTeachers(),
      db.getAllSubjects(),
      db.getAllScores()
    ]);

    // Get school info from settings
    const schoolSettings = await db.getSetting('schoolSettings');
    
    const data: ExportData = {
      students,
      teachers,
      subjects,
      scores,
      exportDate: new Date().toISOString(),
      exportedBy,
      schoolInfo: {
        name: schoolSettings?.schoolName || 'SEMS',
        address: schoolSettings?.address || '',
        phone: schoolSettings?.phone || '',
        email: schoolSettings?.email || ''
      }
    };

    const timestamp = new Date().toISOString().split('T')[0];
    
    switch (format) {
      case 'json':
        return {
          blob: exportToJSON(data),
          filename: `sems-export-${timestamp}.json`
        };
      
      case 'csv':
        return {
          blob: exportToCSV(data),
          filename: `sems-export-${timestamp}.csv`
        };
      
      case 'excel':
        return {
          blob: await exportToExcel(data),
          filename: `sems-export-${timestamp}.xlsx`
        };
      
      case 'docx':
        return {
          blob: await exportToDocx(data),
          filename: `sems-export-${timestamp}.docx`
        };
      
      case 'pptx':
        return {
          blob: await exportToPptx(data),
          filename: `sems-export-${timestamp}.pptx`
        };
      
      default:
        throw new Error('Unsupported export format');
    }
  } catch (error) {
    console.error('Export failed:', error);
    throw new Error('Failed to export data. Please try again.');
  }
};

// Import functionality
export const importSchoolData = async (file: File): Promise<boolean> => {
  try {
    const fileContent = await file.text();
    let data: ExportData;
    
    if (file.type === 'application/json' || file.name.endsWith('.json')) {
      data = JSON.parse(fileContent);
    } else if (file.type === 'text/csv' || file.name.endsWith('.csv')) {
      // Simple CSV parsing (in production, use a proper CSV parser)
      throw new Error('CSV import not yet implemented. Please use JSON format.');
    } else {
      throw new Error('Unsupported file format. Please use JSON or CSV.');
    }
    
    // Validate data structure
    if (!data.students || !data.teachers || !data.subjects || !data.scores) {
      throw new Error('Invalid data format. Missing required sections.');
    }
    
    // Import data to database
    await db.importData(JSON.stringify(data));
    
    return true;
  } catch (error) {
    console.error('Import failed:', error);
    throw error;
  }
};